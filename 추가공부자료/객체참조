오류 정정:
1.함수 밖에서 참조 관계가 끊어진다는 표현 정정
2.튜플 수정이 불가능함.

1.
case1)의 경우 실제 작동원리:
컴파일 타임때 LEGB룰에 따라 함수 내 b는 지역변수로 스캔됨.
함수 네내 "b" 이름은 PyObject *co_varnames;에 저장되고
b가 가리키는 int겍체 x1은 PyLong_FromLong(2)을 통해 참조카운트 1으로 생성되며 그 주소가 PyObject **f_localsplus;에 저장됨.
함수 f() 스코프 안에서 생성된 PyCodeObject와 PyFrameObject는 함수가 종료시 사라짐.
함수 종료시 인터프리터는 int객체x1에 대해 Py_DECREF를 통해 참조카운트를 1감소시키고 int객체x1은 참조카운트가 0으로 되면
gc기 int겍체x1을 수거함.
함수 외부에서 print(b)를 했을때 이 b는 f()의 f_localsplus가 아니라 전역 스코프의 f_localsplus를 참조함.
전역 스코프의 f_localsplus는 함수 내에서 수정되지 않았으므로 print(b)하면 변경되지 않은 값 1이 출력됨.

2.
case3-1)의 경우:
함수 외부에서:b->tuple 객체 T1->int 객체 x0->1
명령어:함수f 내에서 int 객체 x0을 int객체 x1으로 새로 할당한다.
-> 불가능하다.
튜플은 인덱싱이 가능하지만 그걸 수정할수는 없다.
b=(1,)
b[0]=2 오류.

case1)
파이썬>
함수 외부에서: b->int객체 x0->1일때
명령어:함수f 내에서 b의 값을 2로 할당한다
실행:
함수내에서는 b->int객체 x1->2이고
b->int객체 x1 참조는 함수 밖에서 끊어진다.
함수 실행 후 b->int객체 x0->1이므로 b는 1이다.
코드:
b=1
def f():
b=2
f()
print(b) #출력:1
case2-1)
함수 외부에서: b->list 객체 L1->int 객체 x0->1
명령어:함수f 내에서 list객체 L1을 list 객체 L2로 새로 할당한다
실행:
함수 내에서는 b->list객체 L2->int 객체 x1->2이고
b->list객체 L2 참조는 함수 밖에서 끊어진다.
함수 실행 후 b->list 객체 L1->int 객체 x0->1 이므로 b는 [1]이다.
코드:
b=[1]
def f():
b=[2]
f()
print(b) #출력:[1]
case2-2)
함수 외부에서:b->list 객체 L1->int 객체 x0->1
명령어:함수f 내에서 int객체 x0을 int객체 x1으로 새로 할당한다.
실행:
함수 내에서는 b->list 객체 L1->int 객체 x1->2 이고
b->list 객체 L1 참조는 함수 밖에서 끊어진다.
함수 실행 후 b->list 객체 L1->int 객체 x1->2 이므로 b는 [2]이다.
코드:
b=[1]
def f():
b[0]=2
f()
print(b) #출력:[2]
case3-1)
함수 외부에서:b->tuple 객체 T1->int 객체 x0->1
명령어:함수f 내에서 int 객체 x0을 int객체 x1으로 새로 할당한다.
실행:
함수 내에서는 b->tuple 객체T2->int 객체x1->2 이고
b->tuple 객체T2 참조는 함수 밖에서 끊어진다.
함수 실행 후 b->tuple 객체 T1->int 객체 x0->1 이므로 b는 (1,)이다.
코드:
b=(1,)
def f():
b[0]=(2,)
f()
print(b) #출력:(1,)
case3-2)
함수 외부에서:b->tuple 객체 T1->리스트 객체L1->int객체 x0->1
명령어:함수f 내에서 int객체 x0을 int객체 x1으로 새로 할당한다.
실행:
함수 내에서는 b->tuple 객체 T1->리스트 객체L1->int객체 x1->2 이고
b->tuple 객체 T1 참조는 함수 밖에서 끊어진다.
함수 실행 후 b->tuple 객체 T1->리스트 객체L1->int객체 x1->2 이므로 b는 ([2],)이다.
코드:
b=([1],)
def f():
b[0][0]=2
f()
print(b) #출력:([2],)
case4)
b->tuple 객체 T1->int 객체 x0->1
a->tuple 객체 T1->int 객체 x0->1
일때
명령어:b가 참조하는 int객체 x0을 int객체 x1으로 새로 할당해라.
b->tuple 객체T2->int 객체x1->2
a->tuple 객체 T1->int 객체 x0->1
으로 변경됨.
코드:
b=(1,)
a=b
b[0]=2
print(a) #출력:(1,)
print(b) #출력:(2,)
case5)
b->tuple 객체 T1->리스트 객체L1->int객체 x0->1
a->tuple 객체 T1->리스트 객체L1->int객체 x0->1
일때
명령어:b가 참조하는 int객체 x0을 int객체 x1으로 새로 할당해라.
b->tuple 객체 T1->리스트 객체L1->int객체 x1->2
a->tuple 객체 T1->리스트 객체L1->int객체 x1->2
이므로 b는 ([2],)이고 a는 ([2],)이다.
코드:
b=([1],)
a=b
b[0][0]=2
print(a) #출력:([2],)
print(b) #출력:([2],)
